View:
  header:
    title:
      Text:
        text: Create a new group
  onLoad:
    invokeApi:
      name: postPatients
      inputs:
        mrn: ${message}
  body:
    Form:
      styles:
        labelPosition: top
        gap: 20
      onSubmit:
        executeCode: |
          const firstName = groupName.value
          const email = emailValue.value[0]
          const res = ensemble.storage.get("arrayOfUsers")
          res.push({"id": res.length+1, "fields": { "name": firstName, "email": email }})
      children:
        - TextInput:
            id: groupName
            value: foo
            hintText: Group name (e.g. Sales)
        - Divider:
            styles:
              thickness: 1
              color: "#ECEFF6"
        - Text:
            text: ${message}
            styles:
              fontSize: 14
              fontWeight: 500
        - Row:
            crossAxis: center
            styles:
              gap: 16
            children:
              - Avatar:
                  id: avatar
                  aplt: abc
                  name: Ali
              - Button:
                  label: Change Color
                  styles:
                    backgroundColor: transparent
                    color: black
                    borderRadius: "8px"
                    border: "1px solid black"
                    padding: 12
                  onTap:
                    executeCode:
                      body: |
                        console.log("Hello")
                      onComplete: 
                        invokeApi:
                          name: postPatients
                          inputs:
                            mrn: ${ensemble.storage.get('mrn')}
        - Divider:
            styles:
              thickness: 1
              color: "#ECEFF6"
        - MultiSelect:
            id: emailValue
            data: getData.body.users
            labelKey: email
            valueKey: email
            default:
              [
                { value: "jack", label: "jack" },
                { value: "lucy", label: "lucy" },
              ]
            placeholder: "Select From Groups"
        - Divider:
            styles:
              thickness: 1
              color: "#ECEFF6"
        - Row:
            mainAxis: end
            crossAxis: center
            styles:
              gap: 16
            children:
              - Button:
                  label: Open Ask Embrace
                  styles:
                    backgroundColor: transparent
                    border: "0px"
                    color: black
                  onTap:
                    navigateModalScreen:
                      name: Ask Embrace
              - Button:
                  label: Create Group
                  submitForm: true
                  onTap:
                    showToast:
                      message: ${"Created new user " + groupName.value}
                  styles:
                    textColor: white
                    backgroundColor: black
                    color: white
                    padding: 24

API:
  postPatients:
    uri: https://api.baseql.com/airtable/graphql/appzJ2PWwpvRLy1P3
    method: POST
    inputs:
      - mrn
    headers:
      Authorization: Bearer MmI5ZGQxM2MtOWRjYi00OTEyLWEwNmQtNDEyYTIwZjIwNmQ4
    body:
      operationName: 'MyPatient'
      query: |-
        query MyPatient($search: String = "${mrn}") {
          patient(patientMrn:$search){
            firstName
            lastName
            patientMrn
            dob
            income
            encounter {
              copay
              responsibility
              providerId {
                lastName
                firstName
                city
              }
              appointment {
                dateOfService
              }
              drugIds {
                genericName
                frequency
                dosage
              }
            }
            task {
              dueDate
              createdDate
              taskPriority
              taskStatus
              workFlowStepId {
                actionRequired
                workflow {
                  objective
                }
              }
              atlasMeMatch {
                matchedProgramId {
                name
                  assistanceCap
                  daysRetro
                  approvalRate
                  organization {
                    name
                  }
                }
              }
            }
          }
        }
