View:
  onLoad:
    executeCode:
      body: |-
        ensemble.storage.set('dataColumn', [{key1: "value", key2: 2}, {key1: "foo", key2: 3}])
        ensemble.storage.set('activeIndex',1);
      onComplete:
        invokeApi:
          name: getDummyNumbers
          onResponse:
            executeCode: |
              ensemble.storage.set('dummyNumbers', response.body)

  header:
    title:
      Header:
        inputs:
          message: "Inputs to header widget"

  body:
    Column:
      crossAxis: stretch
      gap: 12px
      styles:
        names: page
      children:
        - Icon:
            name: ArrowBack
            onTap:
              navigateBack:
        - Lottie:
            id: MyLottie
            source: https://lottie.host/3568da34-6083-42fc-a254-74d9c1e15b2f/wcVmO2igxm.json
            # source: /images/lottie1.json
            repeat: false
            autoPlay: true
            styles:
              margin: 20px
              height: 200px
            onTap:
              executeCode: |-
                console.log("Tapped");
            onForward:
              executeCode: |-
                console.log("Forwarded");
            onReverse:
              executeCode: |-
                console.log("Reversed");
            onPause:
              executeCode: |-
                console.log("Paused");
            onComplete:
              executeCode: |-
                console.log("Completed");

        - Row:
            styles:
              gap: 8
            children:
              - Button:
                  styles:
                    borderRadius: 20
                  label: Forward
                  onTap:
                    executeCode: |-
                      console.log("Forward");
                      MyLottie.forward();
              - Button:
                  styles:
                    borderRadius: 20
                  label: Reverse
                  onTap:
                    executeCode: |-
                      console.log("Reverse");
                      MyLottie.reverse();
              - Button:
                  styles:
                    borderRadius: 20
                  label: Reset
                  onTap:
                    executeCode: |-
                      console.log("Reset");
                      MyLottie.reset();
              - Button:
                  styles:
                    borderRadius: 20
                  label: Stop
                  onTap:
                    executeCode: |-
                      console.log("Stop");
                      MyLottie.stop();

        - Column:
            item-template:
              data: ["foo", "bar"]
              name: value
              template:
                Column:
                  children:
                    - Text:
                        text: ${ensemble.storage.get('test')}
                    - Button:
                        label: click
                        onTap:
                          showDialog:
                            widget:
                              Button:
                                label: ${value}
                                onTap:
                                  executeCode: |
                                    ${ensemble.storage.set('test', 'hello')}

        - Text:
            text: ${ensemble.user.email}

        - SignInWithGoogle:
            clientId: ${ensemble.env.googleOAuthId}

        - Button:
            label: click 3
            onTap:
              executeCode: |
                ensemble.user.set({email: 'uuu'})
        - Text:
            styles:
              names: heading-1
            text: Widgets
        - Markdown:
            text: More to come! In the meantime, checkout the Ensemble [documentation](https://docs.ensembleui.com/).

        - Card:
            styles:
              maxWidth: unset
              width: unset
              gap: 10px
            children:
              - Text:
                  styles:
                    names: heading-3
                  text: DataGrid
              - DataGrid:
                  id: "myDataGridExample"
                  onRowsSelected:
                    executeCode: |
                      console.log("data", selectedRows, selectedRowKeys);
                  allowSelection: true
                  allowResizableColumns: true
                  styles:
                    headerStyle:
                      backgroundColor: "white"
                      fontSize: "12px"
                      textColor: "#747184"
                      borderBottom: false
                  DataColumns:
                    - label: PATIENT
                    - label: ADVOCATE
                    - label: ICON
                    - label: MENU
                  item-template:
                    data:
                      [
                        { key: "1", patient: "John", advocate: "Mike Ross" },
                        {
                          key: "2",
                          patient: "Reuben",
                          advocate: "Harvey Dent",
                        },
                      ]
                    name: dummyData
                    key: ${dummyData.key}
                    template:
                      DataRow:
                        children:
                          - Text:
                              id: ${dummyData.patient+"Name"}
                              text: ${dummyData.patient}
                          - Text:
                              id: ${dummyData.patient+"Adv"}
                              text: ${dummyData.advocate}
                          - Icon:
                              name: Add
                              styles:
                                borderRadius: 30
                                borderWidth: 1
                                borderColor: black
                                padding: 8
                              onMouseEnter:
                                showDialog:
                                  options:
                                    mask: false
                                    position: absolute
                                    top: ${location.y + 'px'}
                                    left: ${(location.x + 20)+ 'px'}
                                    width: max-content
                                  widget:
                                    Column:
                                      children:
                                        - Text:
                                            text: ${location.y}
                          - PopupMenu:
                              showDivider: true
                              items:
                                - label:
                                    Text:
                                      text: ${spacing.pagePadding}
                                  value: name
                                - label: Location
                                  value: location
                              item-template:
                                data:
                                  [
                                    { name: "hello", value: 11 },
                                    { name: "buyyy", value: 22 },
                                  ]
                                name: product
                                value: ${product.value}
                                template:
                                  Text:
                                    text: ${product.name}
                              widget:
                                Icon:
                                  name: QuestionMark

              - Text:
                  styles:
                    names: heading-3
                  text: DataGrid with item-template inside dataRow
              - DataGrid:
                  id: "myDataGridExample2"
                  styles:
                    headerStyle:
                      backgroundColor: "white"
                      fontSize: "12px"
                      textColor: "#747184"
                      hasDivider: true
                      borderBottom: false
                  hidePagination: true
                  DataColumns: ${Object.keys(ensemble.storage.get('dataColumn')[0])}
                  item-template:
                    data: ${ensemble.storage.get('dataColumn')}
                    name: dummyData
                    key: ${dummyData.key}
                    template:
                      DataRow:
                        item-template:
                          data: ${Object.values(dummyData)}
                          name: value
                          template:
                            Text:
                              text: ${value}
        - Card:
            styles:
              maxWidth: unset
              width: unset
              gap: 10px
            children:
              - Text:
                  styles:
                    names: heading-3
                  text: DataGrid
              - DataGrid:
                  styles:
                    headerStyle:
                      backgroundColor: "white"
                      fontSize: "12px"
                      textColor: "#747184"
                      hasDivider: true
                      borderBottom: false
                  hidePagination: true
                  DataColumns:
                    - label: Number
                  scroll:
                    scrollHeight: 200
                  onScrollEnd:
                    # here you can add your page update logic
                    invokeAPI:
                      name: getDummyNumbers
                      onResponse:
                        executeCode: |
                          ensemble.storage.set('dummyNumbers', [...ensemble.storage.get('dummyNumbers'), ...response.body])
                  item-template:
                    data: ${ensemble.storage.get('dummyNumbers')}
                    name: dummyData
                    template:
                      DataRow:
                        children:
                          - Text:
                              id: ${'x_'+index}
                              text: ${dummyData}
        - Card:
            styles:
              maxWidth: unset
              width: unset
              gap: 10px
            children:
              - Text:
                  styles:
                    names: heading-3
                  text: Charts
              - Column:
                  styles:
                    display: grid
                    gridTemplateColumns: 50% 50%
                  children:
                    - Chart:
                        id: myBarChart
                        styles:
                          width: 90%
                        config: |-
                          {
                            type: 'bar',
                            title: "I am Bar",
                            data:
                              {
                                labels:
                                  [
                                    "Jan",
                                    "Feb",
                                    "Mar",
                                    "Apr",
                                    "May",
                                    "Jun",
                                    "Jul",
                                    "Aug",
                                    "Sep",
                                  ],
                                datasets:
                                  [
                                    {
                                      label: 'Matched',
                                      data: "${getDummyNumbers.body}",
                                      backgroundColor: '#5542f6',
                                      barPercentage: 0.8,
                                      borderRadius: 3,
                                    },
                                    {
                                      label: "Enrolled",
                                      data: [65, 59, 80, 81, 56, 55, 40, 50, 60],
                                      backgroundColor: "${getDummyNumbers.body.length > 1 ? '#01a4ff' : 'yellow'}",
                                      barPercentage: 0.4,
                                      borderRadius: 10,
                                    },
                                  ],
                              },
                            options:
                              {
                                plugins: {
                                  title: {
                                    "display": false
                                  },
                                  tooltip: {
                                    callbacks: {
                                      label: function (context) {
                                        let label = context.dataset.label || '';

                                        if (label) {
                                            label += ': ';
                                        }
                                        if (context.parsed.y !== null) {
                                            label += new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(context.parsed.y);
                                        }
                                        return label;
                                      }
                                    }
                                  }
                                }
                              }  
                          }
                    - Chart:
                        id: myDoughnutChart
                        config: |
                          {
                            type: 'doughnut',
                            title: "I am Doughnut",
                            data:
                              {
                                labels: ["Red", "Blue", "Yellow"],
                                datasets:
                                  [
                                    {
                                      label: "",
                                      data: "${getDummyNumbers.body?.slice(0, 3)}",
                                      backgroundColor:
                                        [
                                          "rgb(255, 99, 132)",
                                          "rgb(54, 162, 235)",
                                          "rgb(255, 205, 86)",
                                        ],
                                      hoverOffset: 4,
                                      borderWidth: 1,
                                    },
                                  ]
                              },
                            options:
                              {
                                plugins: {
                                  legend: {
                                    "display": false
                                  },
                                },
                                cutout: '50%'
                              }
                          }
                    - Chart:
                        id: myLineChart
                        config: |
                          {
                            type: 'line',
                            title: "I am Line",
                            data:
                              {
                                labels: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep"],
                                datasets:
                                  [
                                    {
                                      label: "legend is displayed",
                                      data: [65, 59, 80, 81, 56, 55, 40, 50, 60],
                                    },
                                  ]
                              }
                          }

        - Card:
            styles:
              maxWidth: unset
              width: unset
              gap: 10px
            children:
              - Text:
                  styles:
                    names: heading-3
                  text: Progress
              - Progress:
                  display: linear
                  filledPercentage: 50
                  styles:
                    color: ${colors.primary['600']}
                    thickness: 4
                    backgroundColor: lime
              - Progress:
                  display: linear
                  filledPercentage: 75
                  styles:
                    color: ${colors.primary['600']}
                    thickness: 4
                    backgroundColor: ${colors.light['300']}
              - Progress:
                  display: linear
                  filledPercentage: 33
                  styles:
                    color: ${colors.primary['600']}
                    thickness: 4
                    backgroundColor: ${colors.light['200']}
        - Card:
            styles:
              maxWidth: unset
              width: unset
              gap: 10px
            children:
              - Text:
                  styles:
                    names: heading-3
                  text: Dropdown
              - MultiSelect:
                  label: Choose multiple
                  id: multiSelect1
                  styles:
                    multiSelectBackgroundColor: "aqua"
                    multiSelectBorderWidth: 1
                    multiSelectBorderColor: "lime"
                    multiSelectPadding: 10px
                    multiSelectMaxWidth: 200px
                    backgroundColor: "yellow"
                    selectedBackgroundColor: "green"
                    selectedTextColor: "orange"
                  data:
                    - label: Option 1
                      value: option1
                    - label: Option 2
                      value: option2
              - MultiSelect:
                  label: Choose multiple 2
                  id: multiSelect2
                  styles:
                    selectedBackgroundColor: "blue"
                    selectedTextColor: "aqua"
                  data:
                    - label: Option 1
                      value: option1
                    - label: Option 2
                      value: option2
                    - label: Option 3
                      value: option3
              - Dropdown:
                  label: Simple
                  hintText: Hint Text
                  styles:
                    dropdownBorderWidth: 3px
                    dropdownBorderColor: "lime"
                    dropdownPadding: 10px
                    dropdownMaxWidth: 200px
                    dropdownMinHeight: 50px
                  items:
                    - label: Option 1
                      value: 1
                    - label: Option 2
                      value: 2
              - Dropdown:
                  id: myDropdown
                  label: With Default Value
                  value: 1
                  styles:
                    dropdownBackgroundColor: "aqua"
                    dropdownBorderWidth: 1
                    dropdownBorderColor: "lime"
                    backgroundColor: "yellow"
                    selectedBackgroundColor: "gray"
                    selectedTextColor: "purple"
                  items:
                    - label: Option 1
                      value: 1
                    - label: Option 2
                      value: 2
              - Dropdown:
                  label: Searchable
                  hintText: Search
                  autoComplete: true
                  hintStyle:
                    color: "red"
                    fontSize: 20px
                  items:
                    - label: Option 1
                      value: option1
                    - label: Option 2
                      value: option2
              - Dropdown:
                  value: 11
                  label: With item template
                  labelStyle:
                    color: green
                    fontSize: 20
                    backgroundColor: "lightgreen"
                    borderRadius: 10
                  item-template:
                    data:
                      [
                        { name: "hello", value: 11 },
                        { name: "buyyy", value: 22 },
                      ]
                    name: product
                    value: ${product.value}
                    template:
                      Text:
                        text: ${product.name}
                  items:
                    - label: Option 1
                      value: option1
                    - label: Option 2
                      value: option2
              - Dropdown:
                  label: With the label widget
                  hintText: Hint Text
                  value: 111
                  items:
                    - label:
                        Text:
                          text: Here is my label 1
                      value: 111
                    - label:
                        Text:
                          text: Here is my label 2
                      value: 222

        - Card:
            styles:
              maxWidth: unset
              width: unset
            children:
              - Form:
                  styles:
                    labelPosition: top
                    gap: 20px
                  children:
                    - Text:
                        styles:
                          names: heading-3
                        text: Date Picker
                    - Date:
                        label: Example 1 - Date picker
                        hintText: Placeholder value
                        showCalendarIcon: false
                        styles:
                          width: 300px
                    - Date:
                        label: Example 2 - Date picker with restricted range
                        initialValue: "2021-01-20"
                        firstDate: "2021-01-15"
                        lastDate: "2021-01-25"
                    - Date:
                        id: onChangeDemoDate
                        label: Example 3 - onChange
                        hintText: Select a date
                        onChange:
                          executeCode:
                            body: |-
                              console.log(onChangeDemoDate);
                              onChangeDemo.setText('You selected: ' + onChangeDemoDate.value);
                    - Text:
                        id: onChangeDemo
        - Dropdown:
            id: clientSelector
            value: All Clients
            hintText: Chose Client
            onItemSelect:
              executeCode: |
                console.log(clientSelector, selectedValue);
            items:
              - label: All Clients
                value: all clients
              - label: Client Name
                value: client name
              - label: Location Group
                type: group
                items:
                  - label: Location Name 1
                    value: location name 1
                  - label: Location Name 2
                    value: location name 2
                  - label: Location Name 3
                    value: location name 3
              - label: Client Name 2
                value: client name 2
            styles:
              width: 300px
              justifySelf: end
        - DateRange:
            id: dateRange1
            enabled: true
            suffixIcon:
              name: HomeOutlined
            onChange:
              executeCode:
                body: |-
                  console.log(dateRange1.value);
        - Button:
            label: Hello
            onTap:
              executeCode: |
                onChangeDemoDate.setValue("02/12/2024")

        - TabBar:
            items:
              - label: Home
                widget:
                  Text:
                    text: Hello
              - label: About
                icon:
                  name: HomeOutlined
                widget:
                  Text:
                    text: Hello 222
            tabStyles:
              tabNavBackgroundColor: yellow
              tabNavPadding: 10px 5px
              tabBorderRadius: 10
              tabBackgroundColor: orange
              tabNavBottomBorderShow: false
              tabNavBorderRadius: 10
            styles:
              activeTabBackgroundColor: red
              activeTabColor: white
              inkBarShow: false
              tabContentHolderBackgroundColor: green
              tabContentHolderBorderRadius: 10
              tabContentHolderPadding: 10px 5px

        - DataGrid:
            DataColumns:
              - label: Number
              - label: Name
            item-template:
              data: [1, 2]
              name: dummyData
              template:
                DataRow:
                  onTap:
                    navigateScreen:
                      name: forms
                  children:
                    - Text:
                        text: ${dummyData}
                    - Collapsible:
                        expandIconPosition: "end"
                        items:
                          - key: "2"
                            label: Here is my label 2
                            children:
                              Text:
                                text: Here is my value 2
                        onCollapse:
                          executeCode: |
                            console.log('HelloC', data)
        - Card:
            styles:
              maxWidth: unset
              width: unset
            children:
              - Markdown:
                  text: |
                    ### Toggle Button
              - ToggleButton:
                  id: toggleButtonWidget
                  styles:
                    margin: "12px 0px 10px 0px"
                    spacing: 0
                    runSpacing: 3
                    color: ${colors.gray['900']}
                    borderColor: ${colors.gray['200']}
                    backgroundColor: white
                    selectedColor: ${colors.gray['900']}
                    selectedBackgroundColor: ${colors.gray['100']}
                    selectedBorderColor: ${colors.gray['200']}
                  value: button 1
                  items:
                    - label: Button 1
                      value: button 1
                    - label: Button 2
                      value: button 2
                  onChange:
                    executeCode:
                      body: |-
                        console.log('toggle button changed: ' + toggleButtonWidget.value);

        - Card:
            styles:
              maxWidth: unset
              width: unset
            children:
              - Markdown:
                  text: |
                    ### Slider
              - Slider:
                  styles:
                    maxWidth: unset
                  dots: true
                  min: 0
                  max: 10
                  value: 2
                  divisions: 10

        - Card:
            styles:
              maxWidth: unset
              width: unset
              gap: 10px
            children:
              - Markdown:
                  text: |
                    ### Switch
              - Switch:
                  enabled: true
                  size: small
                  value: true
                  leadingText: Set to true and requred

        - Card:
            styles:
              maxWidth: unset
              width: unset
              gap: 10px
            children:
              - Markdown:
                  text: |
                    ### Image Cropper
              - ImageCropper:
                  id: imageCropper
                  source: https://img.huffingtonpost.com/asset/5ab4d4ac2000007d06eb2c56.jpeg?cache=sih0jwle4e&ops=1910_1000
                  styles:
                    strokeColor: red
                    strokeWidth: 2px
                  onCropped:
                    executeCode: |
                      console.log('Image Cropped Successfully', file)
                      croppedImage.setSource(file)

              - Button:
                  label: Rotate clockwise
                  onTap:
                    executeCode: |
                      imageCropper.setRotate(imageCropper.rotate + 90)
              - Button:
                  label: Rotate anti-clockwise
                  onTap:
                    executeCode: |
                      imageCropper.setRotate(imageCropper.rotate - 90)
              - Button:
                  label: Crop
                  onTap:
                    executeCode: |
                      imageCropper.crop()

              - Image:
                  id: croppedImage
                  styles:
                    maxWidth: 500px
                  source: https://img.huffingtonpost.com/asset/5ab4d4ac2000007d06eb2c56.jpeg?cache=sih0jwle4e&ops=1910_1000
        - Card:
            styles:
              width: unset
              maxWidth: unset
            children:
              - Stepper:
                  id: workflowStepper
                  activeStepIndex: ${ensemble.storage.get('activeIndex')}
                  styles:
                    connectorColor: black
                    connectorHeight: 4
                    backgroundColor: green
                    padding: 20
                    borderRadius: 10
                  steps:
                    - stepLabel: Review Match
                      contentWidget:
                        Text:
                          text: Step 0
                    - stepLabel: Review
                      contentWidget:
                        Text:
                          text: Step 1
                    - stepLabel: SubmitDocs
                      contentWidget:
                        Text:
                          text: Step 2
                    - stepLabel: Track
                      contentWidget:
                        Text:
                          text: Step 3
                    - stepLabel: Enroll
                      contentWidget:
                        Text:
                          text: Step 4
                  item-template:
                    data:
                      - name: Review Match
                        iconName: Balance
                      - name: Obtain Consent
                        iconName: VerifiedUserOutlined
                      - name: Submit Docs
                        iconName: Check
                      - name: Track
                        iconName: FingerprintOutlined
                      - name: Enroll
                        iconName: ThumbUpAltOutlined
                    name: step
                    template:
                      Icon:
                        name: Search
              - Button:
                  label: Next
                  onTap:
                    executeCode:  |
                      workflowStepper.handleNext();
              - Button:
                  label: Prev
                  onTap:
                    executeCode:  |
                      workflowStepper.handleBack();
API:
  getDummyProducts:
    method: GET
    uri: https://dummyjson.com/products
  getDummyNumbers:
    method: GET
    uri: https://mocki.io/v1/c1f19d68-e6c8-4ae3-848d-d99e588cf224
