View:
  onLoad:
    executeCode:
      body: |
        ensemble.storage.set('childrenFits', [10, 1, 4]);
        ensemble.storage.set('bgColor', '#f0f0f0');
        console.log('onLoad')
      onComplete:
        invokeAPI:
          name: getDummyProducts
          inputs:
            skip: 10
          onResponse:
            executeCode: |
              const res = response.body.products;
              ensemble.storage.set("skip", 10)
              ensemble.storage.set("products", res);
  header:
    title:
      Header:

  body:
    Column:
      styles:
        names: page
      children:
        - Text:
            styles:
              names: heading-1
            text: Layouts
        - Markdown:
            text: This screen demonstrates a few patterns to get you started with Ensemble. Here, we fetch data from an API and use control expressions to display a loading state and a list of products. Try making a few changes and see how the screen automatically updates! For more information, see [help](/help).

        - Text:
            styles:
              names: heading-3
            text: Row
        - Row:
            styles: { gap: 10px, crossAxis: center, padding: 12 }
            children:
              - Markdown:
                  text: |
                    Row is a layout widget that arranges its children in a horizontal line. It is the most basic layout widget. You can use it to create a row of widgets.
              - Column:
                  children:
                    - Text:
                        text: O
              - Button:
                  label: Row

        - Text:
            styles:
              names: heading-3
            text: FittedRow
        - FittedRow:
            onTap:
              executeCode: |
                console.log('FittedRow')
            styles:
              {
                childrenFits: "${ensemble.storage.get('childrenFits')}",
                crossAxis: center,
                padding: 12,
                backgroundColor: "${ensemble.storage.get('bgColor')}",
              }
            children:
              - Markdown:
                  text: |
                    Stretch to fit the parent (the parent is required to have a predetermined width), then distribute the horizontal spaces evenly among its children. You can override the space distribution via **childrenFits** attribute.
              - Column:
                  children:
                    - Text:
                        text: O
              - Button:
                  label: FittedRow

        - Text:
            styles:
              names: heading-3
            text: Column
        - Column:
            styles: { gap: 10px, crossAxis: center, padding: 12 }
            children:
              - Markdown:
                  text: |
                    Column is a layout widget that arranges its children in a vertical line. It is the most basic layout widget. You can use it to create a column of widgets.
              - Column:
                  children:
                    - Text:
                        text: O
              - Button:
                  label: Column

        - Text:
            styles:
              names: heading-3
            text: FittedColumn
        - FittedColumn:
            styles:
              childrenFits: [3, 9, 1, 1, auto]
              padding: 20
              crossAxis: center
            children:
              - Markdown:
                  text: |
                    Fitted Column widget stretches to fit the parent (the parent is required to have a predetermined height), then distribute the vertical spaces evenly among its children. You can override the space distribution via **childrenFits** attribute.

                    As in this example we can see. The first value corresponds to this text widget.
              - Tag:
                  label: 0
              - Tag:
                  label: 1
              - Tag:
                  label: 2
              - Button:
                  label: FittedColumn

        - Text:
            styles:
              names: heading-3
            text: My Products
        - Column:
            children:
              - GridView:
                  styles:
                    maxHeight: 200px
                    overflow: auto
                  onScrollEnd:
                    # here you can add your page update logic
                    invokeAPI:
                      name: getDummyProducts
                      inputs:
                        skip: ${ensemble.storage.get('skip') + 10}
                      onResponse:
                        executeCode: |
                          const prevItem = ensemble.storage.get("products")
                          const res = response.body.products;
                          ensemble.storage.set("skip", ensemble.storage.get('skip') + 10)
                          ensemble.storage.set("products", [...prevItem, ...res])
                  item-template:
                    data: ${ensemble.storage.get("products")}
                    name: product
                    template:
                      Card:
                        children:
                          - Text:
                              text: ${product.title}
              - LoadingContainer:
                  isLoading: ${getDummyProducts.isLoading}
                  widget:
                    Column:
                      children:
        - Card:
            styles:
              maxWidth: unset
              width: unset
              gap: 10
            children:
              - Markdown:
                  text: |
                    ## Flow 

                    It shows with direction **horizontal** and **vertical**
              - Flow:
                  styles:
                    lineGap: 20
                  item-template:
                    data: ${new Array(20).fill(Math.floor(Math.random() * 100))}
                    name: flowChild
                    template:
                      Column:
                        styles:
                          borderColor: green
                          padding: 6
                          borderWidth: 1
                          borderRadius: 12
                        children:
                          - Icon:
                              name: Search
                          - Text:
                              text: ${"Hello" + flowChild}
              - Flow:
                  styles:
                    lineGap: 20
                    direction: vertical
                  item-template:
                    data: ${new Array(10).fill(Math.floor(Math.random() * 100))}
                    name: flowChild
                    template:
                      Column:
                        styles:
                          borderColor: green
                          padding: 6
                          borderWidth: 1
                          borderRadius: 12
                        children:
                          - Icon:
                              name: Search
                          - Text:
                              text: ${"Hello" + flowChild}
        - Card:
            styles:
              maxWidth: unset
              width: unset
              gap: 10
            children:
              - Markdown:
                  text: |
                    ## Flex 

                    It shows with direction **horizontal** and **vertical**
              - Flex:
                  styles:
                    gap: 4
                  item-template:
                    data: ${new Array(17).fill(Math.floor(Math.random() * 100))}
                    name: flexChild
                    template:
                      Column:
                        styles:
                          borderColor: green
                          padding: 6
                          borderWidth: 1
                          borderRadius: 12
                        children:
                          - Icon:
                              name: Search
                          - Text:
                              text: ${"Hello" + flexChild}

  footer:
    children:
      - Text:
          text: Give support us
    styles:
      backgroundColor: red

API:
  getDummyProducts:
    method: GET
    uri: https://dummyjson.com/products?skip=${skip}&limit=10
    inputs:
      - skip
