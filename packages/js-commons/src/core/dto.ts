/**
 * DTOs = Data Transfer Objects
 *
 * Mostly equivalent to raw JSON definition over wire
 */
export interface HasManifest {
  manifest?: Record<
    string,
    Partial<EnsembleDocument> & {
      relativePath?: string;
    }
  >;
}

export interface EnsembleDocument {
  readonly id: string;
  readonly name: string;
  readonly content: string;
  readonly type: EnsembleDocumentType;

  readonly description?: string;
  readonly isRoot?: boolean;
  readonly isDraft?: boolean;
  readonly isArchived?: boolean;
  readonly createdAt?: Date;
  readonly updatedAt?: Date;
  readonly updatedBy?: {
    name: string;
  };
}

export enum EnsembleDocumentType {
  I18n = "i18n",
  Theme = "theme",
  Asset = "asset",
  Screen = "screen",
  Font = "font",
  Widget = "internal_widget",
  Script = "internal_script",
  Environment = "config",
  Secrets = "secrets",
  Label = "label",
}

export interface ApplicationDTO
  extends Omit<EnsembleDocument, "type" | "content">,
    HasManifest {
  readonly isReact?: boolean;
  readonly isAutoGenerated?: boolean;
  readonly status?: string;
  readonly category?: AppCategory;
  readonly collaborators?: Record<string, AccessType>;
  readonly demoOrder?: number;
  readonly publishingHistory?: PublishingHistory[];
  readonly groupLabels?: Map<string, string>;

  readonly screens: ScreenDTO[];
  readonly widgets?: WidgetDTO[];
  readonly scripts?: ScriptDTO[];
  readonly theme?: ThemeDTO;
  readonly assets?: AssetDTO[];
  readonly fonts?: FontDTO[];
  readonly env?: EnvironmentDTO;
  readonly secrets?: SecretDTO;
  readonly translations?: TranslationDTO[];
}

export interface HasLabel {
  readonly labelGroup?: Label;
}

export interface Label {
  readonly id: string;
  readonly name: string;
}

export interface PublishingHistory {
  readonly publishedTo: string;
  readonly createdAt: Date;
  readonly publishedBy: string;
  readonly publishingLog: string;
  readonly role: string;
}

export type EnsembleLabeledDocument = EnsembleDocument & HasLabel;

export type ScreenDTO = EnsembleLabeledDocument & {
  readonly type: EnsembleDocumentType.Screen;

  readonly path?: string;
  // deprecated?
  readonly category?: string;
};

export type WidgetDTO = EnsembleLabeledDocument & {
  readonly type: EnsembleDocumentType.Widget;
};

export type ScriptDTO = EnsembleLabeledDocument & {
  readonly type: EnsembleDocumentType.Script;
};
export type ThemeDTO = EnsembleDocument & {
  readonly type: EnsembleDocumentType.Theme;
};

export type TranslationDTO = EnsembleDocument & {
  readonly defaultLocale: boolean;
};

export interface EnvironmentDTO {
  readonly envVariables?: Record<string, unknown>;
  readonly secretVariables?: Record<string, unknown>;
}

export interface SecretDTO {
  readonly secrets?: Record<string, unknown>;
}

export type AssetDTO = EnsembleDocument & {
  readonly type: EnsembleDocumentType.Asset;
  readonly fileName: string;
  readonly publicUrl: string;
  readonly copyText: string;
};

export type FontDTO = EnsembleDocument & {
  readonly name?: string;
  readonly fontFamily: string;
  readonly fontWeight: string;
  readonly fontStyle: string;
  readonly fontType: string;
  readonly publicUrl?: string;
};

export enum AppCategory {
  Demo = "Demo",
  Template = "Template",
}

export enum AccessType {
  Read = "read",
  Write = "write",
  Owner = "owner",
}

export type EnsembleDocumentHistoryItem = EnsembleDocument & {
  readonly comment: string;
  readonly label: string;
};

export const ArtifactProps = [
  "screens",
  "widgets",
  "scripts",
  "assets",
  "fonts",
  "translations",
  "env",
  "secrets",
  "theme",
] as const;
