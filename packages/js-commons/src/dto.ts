import type { AccessType, AppCategory, EnsembleDocumentType } from "./enums";

/**
 * DTOs = Data Transfer Objects
 *
 * Mostly equivalent to raw JSON definition over wire
 */
export interface EnsembleDocument {
  readonly id: string;
  readonly name: string;
  readonly content: string;
  readonly type: EnsembleDocumentType;

  readonly description?: string;
  readonly isRoot?: boolean;
  readonly isDraft?: boolean;
  readonly isArchived?: boolean;
  readonly updatedAt?: Date;
  readonly updatedBy?: {
    name: string;
  };
}

export interface ApplicationMetaDTO
  extends Omit<EnsembleDocument, "content" | "type"> {
  readonly isReact?: boolean;
  readonly isPublic?: boolean;
  readonly description?: string;
  readonly yamlFolderPath?: string;
  readonly collaborators?: Map<string, AccessType>;
}

export interface ApplicationDTO extends ApplicationMetaDTO {
  readonly isAutoGenerated?: boolean;
  readonly status?: string;
  readonly category?: AppCategory;
  readonly demoOrder?: number;
  readonly publishingHistory?: PublishingHistory[];
  readonly groupLabels?: Map<string, string>;

  readonly manifest?: Record<
    string,
    Partial<EnsembleDocument> & {
      filePath?: string;
    }
  >;

  readonly screens: ScreenDTO[];
  readonly widgets?: WidgetDTO[];
  readonly scripts?: ScriptDTO[];
  readonly theme?: ThemeDTO;
  readonly translations?: LanguageDTO[];
  readonly assets?: AssetDTO[];
  readonly env?: EnvironmentDTO;
}

export interface HasLabel {
  readonly labelGroup?: Label;
}

export interface Label {
  readonly id: string;
  readonly name: string;
}

export interface PublishingHistory {
  readonly publishedTo: string;
  readonly createdAt: Date;
  readonly publishedBy: string;
  readonly publishingLog: string;
  readonly role: string;
}

export type EnsembleLabeledDocument = EnsembleDocument & HasLabel;

export type ScreenDTO = EnsembleLabeledDocument & {
  readonly type: EnsembleDocumentType.Screen;

  readonly path?: string;
  // deprecated?
  readonly category?: string;
};

export type WidgetDTO = EnsembleLabeledDocument & {
  readonly type: EnsembleDocumentType.Widget;
};

export type ScriptDTO = EnsembleLabeledDocument & {
  readonly type: EnsembleDocumentType.Script;
};
export type ThemeDTO = EnsembleDocument & {
  readonly type: EnsembleDocumentType.Theme;
};

export type LanguageDTO = EnsembleDocument & {
  readonly defaultLocale: boolean;
};

export interface EnvironmentDTO {
  readonly envVariables?: Record<string, unknown>;
  readonly secretVariables?: Record<string, unknown>;
}

export type AssetDTO = EnsembleDocument & {
  readonly type: EnsembleDocumentType.Asset;
  readonly fileName: string;
  readonly publicUrl: string;
  readonly copyText: string;
};

export type FontDTO = EnsembleDocument & {
  readonly name?: string;
  readonly fontFamily: string;
  readonly fontWeight: string;
  readonly fontStyle: string;
  readonly fontType: string;
  readonly publicUrl?: string;
};

export type EnsembleDocumentHistoryItem = EnsembleDocument & {
  readonly comment: string;
  readonly label: string;
};
